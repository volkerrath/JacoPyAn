!----------------------------------------------------------------------!
! 3D_MT model covariance by Gary Egbert and Anna Kelbert: definitions. !
!----------------------------------------------------------------------!

! 1) modelCov_t data type with private attributes

  type :: modelCov_t

#ifdef JAC
    ! private
#else
    private
#endif

	! dimensions of the grid
	integer                                           :: Nx, Ny, NzEarth

	! the number of times the smoothing operator should be applied
	integer                                           :: N

	! general rules for smoothing in the X and Y-directions, dimension(NzEarth)
	real (kind=prec), pointer, dimension(:)   :: Sx
	real (kind=prec), pointer, dimension(:)   :: Sy

	! general rule for vertical smoothing
	real (kind=prec)                          :: Sz

	! special rules for smoothing across a surface stored as a sparse array
    type (sparsevecc)                                 :: S

	! an integer array that defines regions for smoothing and scaling purposes
    type (iscalar)                                    :: mask

	! true when all arrays are allocated, initialized and ready to use
    logical                                           :: allocated

  end type

  ! define the mask for air and ocean here. By default, we do not switch off
  ! the smoothing between the air & ocean and the rest of the model. However,
  ! we do set the scaling to zero for both of these regions.

#ifdef JAC
  integer, parameter                         :: AIR   = 0
  integer, parameter                         :: OCEAN = 9
  integer, parameter                         :: FIXED = 2
  integer, parameter                         :: FREE  = 1 ! anything 1-8
#else
  integer, parameter, private                         :: AIR   = 0
  integer, parameter, private                         :: OCEAN = 9
  integer, parameter, private                         :: FIXED = 2
  integer, parameter, private                         :: FREE  = 1 ! anything 1-8
#endif

! 2) CmSqrt (an instance of modelCov_t), saved and private to the modelParam module
#ifdef JAC
  type (modelCov_t), save                    ::  CmSqrt
#else
  type (modelCov_t), private, save                    ::  CmSqrt
#endif

! 3) public procedures to create, deallocate and multiply by CmSqrt

  public    :: create_CmSqrt, deall_CmSqrt, multBy_CmSqrt, read_CmSqrt,multBy_Cm

! 4) any private procedures required for the model covariance

  public   :: RecursiveAR, SmoothX, SmoothY, SmoothZ, Scaling
